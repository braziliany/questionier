{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "purple",
    "glyph" : "magic"
  },
  "name" : "彩云诗词桌面天气",
  "script" : "\n\/*\n **************************************\n * 配置项\n **************************************\n *\/\n\n\/\/ 地区\nconst locale = \"zh_cn\"\n\n\/\/ 背景是否是颜色\nconst colorMode = false\n\n\/\/ 背景颜色\nconst bgColorStr = \"#000000\"\n\n\/\/ 预览大小【小：Small，中：Medium，大：Large】\nconst previewSize = \"Medium\"\n\n\/\/ 彩云天气的apiKey，自己去免费申请：https:\/\/caiyunapp.com\nconst apiKey = \"17Y4IwEB99SaXhwJ\"\n\n\/\/ 默认的定位信息，定位失败的时候默认读取\n\/\/ https:\/\/open.caiyunapp.com\/File:Adcode-release-2020-06-10.xlsx.zip\n\/\/ 上述链接查看对应地区的详细经纬度\nlet locationData = {\n  \"latitude\": undefined,\n  \"longitude\": undefined,\n  \"locality\": undefined,\n  \"subLocality\": undefined\n}\n\n\/\/ 锁定地区，直接使用上述填写的地址信息不进行定位\nconst lockLocation = false\n\n\/\/ 是否需要选择图片背景\nconst changePicBg = true\n\n\/\/ 日程显示条数\nconst maxSchedules = 2\n\n\/\/ 提醒事项显示条数\nconst maxReminders = 2\n\n\/\/ 内容区左右边距\nconst padding = {\n  top: 0,\n  left: 4,\n  bottom: 0,\n  right: 4\n}\n\n\/\/ 顶部问候语，英文花样文字：https:\/\/beizhedenglong.github.io\/weird-fonts\/\nconst greetingText = {\n  nightGreeting: \"🦉 𝑇𝑖𝑚𝑒 𝑡𝑜 𝑔𝑒𝑡 𝑙𝑎𝑖𝑑~\",\n  morningGreeting: \"💫 𝐺𝑜𝑜𝑑 𝑚𝑜𝑟𝑛𝑖𝑛𝑔~\",\n  noonGreeting: \"🥳 𝐺𝑜𝑜𝑑 𝑛𝑜𝑜𝑛~\",\n  afternoonGreeting: \"🐡 𝐺𝑜𝑜𝑑 𝑎𝑓𝑡𝑒𝑟𝑛𝑜𝑜𝑛~\",\n  eveningGreeting: \"🐳 𝐺𝑜𝑜𝑑 𝑒𝑣𝑒𝑛𝑖𝑛𝑔~\"\n}\n\n\/\/ 天气对应的icon \nconst weatherIcos = {\n  SUNRISE: \"sunrise.fill\", \/\/ 日出\n  CLEAR_DAY: \"sun.max.fill\", \/\/ 晴（白天） CLEAR_DAY\n  CLEAR_NIGHT: \"sun.max.fill\", \/\/ 晴（夜间） CLEAR_NIGHT\n  PARTLY_CLOUDY_DAY: \"cloud.sun.fill\", \/\/ 多云（白天）  PARTLY_CLOUDY_DAY\n  PARTLY_CLOUDY_NIGHT: \"cloud.sun.fill\", \/\/ 多云（夜间）  PARTLY_CLOUDY_NIGHT\n  CLOUDY: \"cloud.fill\", \/\/ 阴  CLOUDY\n  LIGHT_HAZE: \"sun.haze.fill\", \/\/ 轻度雾霾   LIGHT_HAZE\n  MODERATE_HAZE: \"sun.haze.fill\", \/\/ 中度雾霾  MODERATE_HAZE\n  HEAVY_HAZE: \"sun.haze.fill\", \/\/ 重度雾霾   HEAVY_HAZE\n  LIGHT_RAIN: \"cloud.drizzle.fill\", \/\/ 小雨 LIGHT_RAIN\n  MODERATE_RAIN: \"cloud.rain.fill\", \/\/ 中雨 MODERATE_RAIN\n  HEAVY_RAIN: \"cloud.rain.fill\", \/\/ 大雨  HEAVY_RAIN\n  STORM_RAIN: \"cloud.heavyrain.fill\", \/\/ 暴雨 STORM_RAIN\n  FOG: \"cloud.fog.fill\", \/\/ 雾 FOG\n  LIGHT_SNOW: \"cloud.snow.fill\", \/\/ 小雪  LIGHT_SNOW\n  MODERATE_SNOW: \"cloud.snow.fill\", \/\/ 中雪 MODERATE_SNOW\n  HEAVY_SNOW: \"cloud.snow.fill\", \/\/ 大雪  HEAVY_SNOW\n  STORM_SNOW: \"wind.snow.fill\", \/\/ 暴雪 STORM_SNOW\n  DUST: \"cloud.dust.fill\", \/\/ 浮尘  DUST\n  SAND: \"cloud.dust.fill\", \/\/ 沙尘  SAND\n  WIND: \"cloud.wind.fill\", \/\/ 大风  WIND\n  SUNSET: \"sunset.fill\", \/\/ 日落\n}\n\n\/\/ 天气信息控制\nconst weatherControl = {\n  HUMIDITY: true, \/\/ 是否显示相对湿度\n  COMFORT: true, \/\/ 是否显示舒适指数\n  ULTRAVIOLET: true, \/\/ 是否显示紫外线指数\n  AQI: true, \/\/ 是否显示空气质量指数\n  HEIGHT_LOW: true, \/\/ 是否显示温度范围\n  SUNRISE_SUNSET: true, \/\/ 是否显示日出日落时间\n  UPDATE_TIME: true, \/\/ 是否显示天气更新时间\n}\n\n\/\/ 周标题\nconst weekTitle = ['周日', '周一', '周二', '周三', '周四', '周五', '周六']\n\n\/\/ 默认文字颜色\nconst defaultTextColor = new Color(\"#ffffff\")\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/ 标题样式\nlet textStyle = {\n  stack: undefined, \/\/ 加入到哪个内容栈显示\n  topMargin: 0, \/\/ 顶部距离\n  text: \"\", \/\/ 显示的文字\n  lineLimit: 0, \/\/ 行数控制，0是全部展示\n  font: Font.systemFont(18), \/\/ 字体\n  textColor: defaultTextColor, \/\/ 文字颜色\n}\n\n\/\/ 图片样式\nlet imgStyle = {\n  stack: undefined, \/\/ 加入到哪个内容栈显示\n  topMargin: 0, \/\/ 顶部距离\n  img: undefined, \/\/ 图片资源\n  width: 0, \/\/ 宽\n  length: 0, \/\/ 长\n  tintColor: undefined, \/\/ 图片渲染颜色\n}\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\n\/\/ 当前日期\nconst currentDate = new Date()\n\/\/ 年份\nconst year = currentDate.getFullYear()\n\/\/ 月份\nconst month = currentDate.getMonth() + 1\n\/\/ 日期\nconst day = currentDate.getDate()\n\/\/ 小时\nconst hour = currentDate.getHours()\n\/\/ 分钟\nconst minute = currentDate.getMinutes()\n\n\/*\n ****************************************************************************\n ****************************************************************************\n ****************************************************************************\n *\/\n\n\n\/********************************************************************\/\n\/****************************定义小组件****************************\/\n\/********************************************************************\/\nconst filename = `${Script.name()}.jpg`\nconst files = FileManager.local()\nconst path = files.joinPath(files.documentsDirectory(), filename)\nconst widget = new ListWidget()\n\n\n\/****************************小组件内容START****************************\/\n\/\/ 彩云天气信息\nconst weatherInfo = await getWeather()\n\/\/ 农历信息\nconst lunarInfo = await getLunar()\n\/\/ 今日诗词\nconst poetry = await getPoetry()\n\/\/ \/\/ 日程信息\nconst showSchedules = await getSchedules()\n\/\/ 提醒事项\nconst showReminders = await getReminders()\n\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/ 内容排版\nlet contentStack = widget.addStack()\ncontentStack.layoutHorizontally()\n\/\/ 整体内容居中对齐\ncontentStack.centerAlignContent()\n\/\/ 背景\nwidget.backgroundColor = new Color(bgColorStr)\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/ 左侧内容\nlet leftStack = contentStack.addStack()\nleftStack.layoutVertically()\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/ 问候\nlet titleStack = horizontallyCenterStack(leftStack)\n\/\/ 问候语获取内容\nconst greeting = provideGreeting(currentDate)\n\/\/ 添加显示标题  \naddStyleText(titleStack, 0, greeting, 1, Font.systemFont(22), defaultTextColor)\n\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/ 年月日\nconst dateStr = getDateStr(currentDate)\naddStyleText(leftStack, 2, dateStr, 1, Font.systemFont(16), new Color(\"#ffcc99\"))\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/ 星期几 \/ 农历日期\nconst weekDayColor = new Color(\"#ffffff\", 0.9)\nleftStack.addSpacer(2)\nlet dateStack = horizontallyCenterStack(leftStack)\n\/\/ 添加显示星期几\nconst weekDayTitle = getDayWeekTitle(currentDate)\naddStyleText(dateStack, 0, weekDayTitle, 1, Font.systemFont(16), weekDayColor)\ndateStack.addSpacer(4)\n\n\/\/ 农历信息\nlet infoLunarText = lunarInfo.data.lunar\ninfoLunarText = infoLunarText.substring(12, infoLunarText.length)\n\/\/ 添加显示农历\naddStyleText(dateStack, 0, infoLunarText, 1, Font.systemFont(16), weekDayColor)\n\n\/\/ 电池信息\ndateStack.addSpacer(2)\nconst batteryLevel = Device.batteryLevel() * 100\nconst batteryStr = `〓 ${getBatteryLevel()} 〓`\n\/\/ 添加显示电池具体信息\naddStyleText(dateStack, 0, batteryStr, 1, Font.systemFont(15), weekDayColor)\n\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/ 天气预警、预告信息\nconst weatherAlertInfo = weatherInfo.alertWeatherTitle \nlet weatherDesc = weatherInfo.weatherDesc\nif (weatherAlertInfo != undefined) {\n  weatherDesc = weatherAlertInfo\n}\n\/\/ 添加显示天气预告信息\naddStyleText(leftStack, 3, weatherDesc, 1, Font.systemFont(12), defaultTextColor)\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/ 日程、诗词\nconst schedulePoetryColor = new Color(\"#ffffff\", 0.7)\nconst scheduleSize = showSchedules.length\nif (scheduleSize > 0) {\n  addStyleText(leftStack, 1, \"----------------------------------\", 1, Font.systemFont(10), schedulePoetryColor)\n  \/\/ 添加日程\n  let scheduleIndex = 0\n  for (let schedule of showSchedules) {\n    \/\/ 索引值\n    scheduleIndex++\n    if (scheduleIndex > maxSchedules) {\n      return\n    }\n\n    const scheduleStack = horizontallyCenterStack(leftStack)\n    \/\/ 图片\n    const img = getSFIco(\"megaphone\")\n    \/\/ 展示ico\n    addStyleImg(scheduleStack, 0, img, 12, 12, schedulePoetryColor)\n    scheduleStack.addSpacer(4)\n\n    \/\/ 日程标题\n    addStyleText(scheduleStack, 0, schedule.title, 1, Font.systemFont(11), schedulePoetryColor)\n\n    \/\/ 开始时间\n    const scheduleTimeStack = leftStack.addStack()\n    scheduleTimeStack.layoutHorizontally()\n    scheduleTimeStack.addSpacer(17)\n    \/\/ 展示时间\n    addStyleText(scheduleTimeStack, 0, schedule.timeText, 1, Font.systemFont(11), schedulePoetryColor)\n  }\n} else {\n  \/\/ 添加今日诗词\n  leftStack.addSpacer(4)\n  const poetryStack = leftStack.addStack()\n  \/\/ 诗词背景\n  poetryStack.backgroundColor = new Color(\"#666\", 0.5)\n  poetryStack.cornerRadius = 4\n  poetryStack.layoutVertically()\n  poetryStack.addSpacer(2)\n  \/\/\n  const poetryInfoStack = poetryStack.addStack()\n  poetryInfoStack.layoutHorizontally()\n  poetryInfoStack.addSpacer(2)\n  const poetryInfo = poetry.data\n  \/\/ 添加显示诗词\n  const potryContent = `\"${poetryInfo.content.substring(0, poetryInfo.content.length - 1)}\"`\n  addStyleText(poetryInfoStack, 0, potryContent, 1, Font.systemFont(11), schedulePoetryColor)\n\n  \/\/ 添加作者\n  const authStack = poetryStack.addStack()\n  authStack.layoutHorizontally()\n  authStack.addSpacer()\n  \/\/ 显示作者\n  const authorText = `⊱${poetryInfo.origin.dynasty}·${poetryInfo.origin.author}⊰`\n  addStyleText(authStack, 0, authorText, 1, Font.systemFont(11), schedulePoetryColor)\n  authStack.addSpacer(20)\n  poetryStack.addSpacer(2)\n}\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\n\n\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/ 右侧内容\ncontentStack.addSpacer()\nlet rightStack = contentStack.addStack()\n\/\/ 写死右侧宽度\nrightStack.size = new Size(110, 0)\nrightStack.layoutVertically()\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/ 天气Icon\nconst weatherStack = alignRightStack(rightStack)\nweatherStack.bottomAlignContent()\nlet weatherImg = getSFIco(weatherInfo.weatherIco)\n\/\/ 显示天气\naddStyleImg(weatherStack, 0, weatherImg, 32, 32)\n\/\/ 体感温度\nweatherStack.addSpacer(4)\nconst bodyFeelingTemperature = weatherInfo.bodyFeelingTemperature\naddStyleText(weatherStack, 0, `${bodyFeelingTemperature}°C`, 1, Font.boldMonospacedSystemFont(22), defaultTextColor)\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\n\/\/ 相对湿度\nif (weatherControl.HUMIDITY) {\n  rightStack.addSpacer(4)\n  const humidityStack = alignRightStack(rightStack)\n  addStyleText(humidityStack, 0, `相对湿度：${weatherInfo.humidity}`, 1, Font.systemFont(11), defaultTextColor)  \n}\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/ 舒适指数\nif (weatherControl.COMFORT) {\n  rightStack.addSpacer(1)\n  const comfortStack = alignRightStack(rightStack)\n  addStyleText(comfortStack, 0, `舒适指数：${weatherInfo.comfort}`, 1, Font.systemFont(11), defaultTextColor)\n}\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/ 紫外线指数\nif (weatherControl.ULTRAVIOLET) {\n  rightStack.addSpacer(1)\n  const ultravioletStack = alignRightStack(rightStack)\n  addStyleText(ultravioletStack, 0, `紫外线：${weatherInfo.ultraviolet}`, 1, Font.systemFont(11), defaultTextColor)\n}\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/ 空气质量\nif (weatherControl.AQI) {\n  rightStack.addSpacer(1)\n  const aqiInfoStack = alignRightStack(rightStack)\n  addStyleText(aqiInfoStack, 8, `空气质量：${weatherInfo.aqiInfo}`, 1, Font.systemFont(11), defaultTextColor)\n}\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/ 高低温\nif (weatherControl.HEIGHT_LOW) {\n  const minTemperature = weatherInfo.minTemperature\n  const maxTemperature = weatherInfo.maxTemperature\n  \/\/ 右对齐\n  rightStack.addSpacer(3)\n  const tempStack = alignRightStack(rightStack)\n  \/\/ 高温\n  addStyleText(tempStack, 0, `↑`, 1, Font.systemFont(10), new Color(\"#ff0000\"))\n  addStyleText(tempStack, 0, `${weatherInfo.maxTemperature}°`, 1, Font.systemFont(10), defaultTextColor)\n  \/\/ 低温\n  tempStack.addSpacer(6)\n  addStyleText(tempStack, 0, `↓`, 1, Font.systemFont(10), new Color(\"#2bae85\"))\n  addStyleText(tempStack, 0, `${weatherInfo.minTemperature}°`, 1, Font.systemFont(10), defaultTextColor)\n}\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/ 日出\nif (weatherControl.SUNRISE_SUNSET) {\n  rightStack.addSpacer(2)\n  let symbolStack = rightStack.addStack()\n  symbolStack.layoutHorizontally()\n  symbolStack.addSpacer()\n  symbolStack.bottomAlignContent()\n  \/\/ 添加日出icon\n  let sunriseImg = getSFIco(weatherIcos.SUNRISE)\n  addStyleImg(symbolStack, 0, sunriseImg, 15, 15)\n  symbolStack.addSpacer(4)\n  \/\/ 日出时间 \/ 样式\n  addStyleText(symbolStack, 0, weatherInfo.sunrise, 1, Font.systemFont(10), defaultTextColor)\n  \/\/***********************\/\/\n  \/\/ 日落\n  symbolStack.addSpacer(4)\n  \/\/ 添加日落icon\n  let sunsetImg = getSFIco(weatherIcos.SUNSET)\n  addStyleImg(symbolStack, 0, sunsetImg, 15, 15)\n  symbolStack.addSpacer(4)\n  \/\/ 日落时间 \/ 样式\n  addStyleText(symbolStack, 0, weatherInfo.sunset, 1, Font.systemFont(10), defaultTextColor)\n}\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/ 天气更新时间\nif (weatherControl.UPDATE_TIME) {\n  \/\/ 更新时间\n  rightStack.addSpacer(2)\n  const updateTimeStack = alignRightStack(rightStack)\n  addStyleText(updateTimeStack, 0, `上次更新 → ${hour}:${minute}`, 1, Font.systemFont(8), new Color(\"#ffffff\", 0.8))  \n}\n\n\/*****************************小组件内容ENd*****************************\/\n\nif (!colorMode && !config.runsInWidget && changePicBg) {\n  \/\/ Determine if user has taken the screenshot.\n  const okTips = \"您的小部件背景已准备就绪\"\n  let message = \"图片模式支持相册照片&背景透明\"\n  let options = [\"图片选择\",\"透明背景\"]\n  let isTransparentMode = await generateAlert(message, options)\n  if (!isTransparentMode) {\n    let img = await Photos.fromLibrary()\n    message = okTips\n    const resultOptions = [\"好的\"]\n    await generateAlert(message, resultOptions)\n    files.writeImage(path, img)\n  } else {\n    message = \"以下是【透明背景】生成步骤，如果你没有屏幕截图请退出，并返回主屏幕长按进入编辑模式。滑动到最右边的空白页截图。然后重新运行！\"\n    let exitOptions = [\"继续(已有截图)\",\"退出(没有截图)\"]\n  \n    let shouldExit = await generateAlert(message,exitOptions)\n    if (shouldExit) return\n  \n    \/\/ Get screenshot and determine phone size.\n    let img = await Photos.fromLibrary()\n    let height = img.size.height\n    let phone = phoneSizes()[height]\n    if (!phone) {\n      message = \"您似乎选择了非iPhone屏幕截图的图像，或者不支持您的iPhone。请使用其他图像再试一次!\"\n      await generateAlert(message,[\"好的！我现在去截图\"])\n      return\n    }\n  \n    \/\/ Prompt for widget size and position.\n    message = \"您想要创建什么尺寸的小部件？\"\n    let sizes = [\"小号\",\"中号\",\"大号\"]\n    let size = await generateAlert(message,sizes)\n    let widgetSize = sizes[size]\n  \n    message = \"您想它在什么位置？\"\n    message += (height == 1136 ? \" (请注意，您的设备仅支持两行小部件，因此中间和底部选项相同。)\" : \"\")\n  \n    \/\/ Determine image crop based on phone size.\n    let crop = { w: \"\", h: \"\", x: \"\", y: \"\" }\n    if (widgetSize == \"小号\") {\n      crop.w = phone.小号\n      crop.h = phone.小号\n      let positions = [\"顶部 左边\",\"顶部 右边\",\"中间 左边\",\"中间 右边\",\"底部 左边\",\"底部 右边\"]\n      let position = await generateAlert(message,positions)\n    \n      \/\/ Convert the two words into two keys for the phone size dictionary.\n      let keys = positions[position].split(' ')\n      crop.y = phone[keys[0]]\n      crop.x = phone[keys[1]]\n    \n    } else if (widgetSize == \"中号\") {\n      crop.w = phone.中号\n      crop.h = phone.小号\n    \n      \/\/ 中号 and 大号 widgets have a fixed x-value.\n      crop.x = phone.左边\n      let positions = [\"顶部\",\"中间\",\"底部\"]\n      let position = await generateAlert(message,positions)\n      let key = positions[position].toLowerCase()\n      crop.y = phone[key]\n    \n    } else if(widgetSize == \"大号\") {\n      crop.w = phone.中号\n      crop.h = phone.大号\n      crop.x = phone.左边\n      let positions = [\"顶部\",\"底部\"]\n      let position = await generateAlert(message,positions)\n    \n      \/\/ 大号 widgets at the 底部 have the \"中间\" y-value.\n      crop.y = position ? phone.中间 : phone.顶部\n    }\n    \n    \/\/ Crop image and finalize the widget.\n    let imgCrop = cropImage(img, new Rect(crop.x,crop.y,crop.w,crop.h))\n    \n    message = \"您的小部件背景已准备就绪，退出到桌面预览。\"\n    const resultOptions = [\"好的\"]\n    await generateAlert(message, resultOptions)\n    files.writeImage(path, imgCrop)\n  }  \n\n}\n\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\nif (colorMode) {\n  widget.backgroundColor = new Color(bgColorStr)\n} else {\n  widget.backgroundImage = files.readImage(path)\n}\n\/\/ 设置边距(上，左，下，右)\nwidget.setPadding(padding.top, padding.left, padding.bottom, padding.right)\n\/\/ 设置组件\nScript.setWidget(widget)\n\/\/ 完成脚本\nScript.complete()\n\/\/ 预览\nif (previewSize == \"Large\") {\n  widget.presentLarge()\n} else if (previewSize == \"Medium\") {\n  widget.presentMedium()\n} else {\n  widget.presentSmall()\n}\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\n\n\n\n\n\n\/*\n ************************************************************************************\n *\/\n\n\/\/ Generate an alert with the provided array of options.\nasync function generateAlert(message,options) {\n  let alert = new Alert()\n  alert.message = message\n  \n  for (const option of options) {\n    alert.addAction(option)\n  }\n  \n  let response = await alert.presentAlert()\n  return response\n}\n\n\/\/ Crop an image into the specified rect.\nfunction cropImage(img,rect) {\n  let draw = new DrawContext()\n  draw.size = new Size(rect.width, rect.height)\n  draw.drawImageAtPoint(img,new Point(-rect.x, -rect.y))  \n  return draw.getImage()\n}\n\n\/\/ Pixel sizes and positions for widgets on all supported phones.\nfunction phoneSizes() {\n  let phones = {  \n  \"2688\": {\n      \"小号\":  507,\n      \"中号\":  1080,\n      \"大号\":  1137,\n      \"左边\":  81,\n      \"右边\":  654,\n      \"顶部\":  228,\n      \"中间\":  858,\n      \"底部\":  1488\n  },\n  \n  \"1792\": {\n      \"小号\":  338,\n      \"中号\":  720,\n      \"大号\":  758,\n      \"左边\":  54,\n      \"右边\":  436,\n      \"顶部\":  160,\n      \"中间\":  580,\n      \"底部\":  1000\n  },\n  \n  \"2436\": {\n      \"小号\":  465,\n      \"中号\":  987,\n      \"大号\":  1035,\n      \"左边\":  69,\n      \"右边\":  591,\n      \"顶部\":  213,\n      \"中间\":  783,\n      \"底部\":  1353\n  },\n  \n  \"2208\": {\n      \"小号\":  471,\n      \"中号\":  1044,\n      \"大号\":  1071,\n      \"左边\":  99,\n      \"右边\":  672,\n      \"顶部\":  114,\n      \"中间\":  696,\n      \"底部\":  1278\n  },\n  \n  \"1334\": {\n      \"小号\":  296,\n      \"中号\":  642,\n      \"大号\":  648,\n      \"左边\":  54,\n      \"右边\":  400,\n      \"顶部\":  60,\n      \"中间\":  412,\n      \"底部\":  764\n  },\n  \n  \"1136\": {\n      \"小号\":  282,\n      \"中号\":  584,\n      \"大号\":  622,\n      \"左边\":  30,\n      \"右边\":  332,\n      \"顶部\":  59,\n      \"中间\":  399,\n      \"底部\":  399\n  }\n  }\n  return phones\n}\n\n\n\/*\n ****************************************************************************************************************************\n ****************************************************************************************************************************\n ****************************************************************************************************************************\n *\/\n\n\/*\n **************************************\n * 添加一行文本数据显示\n **************************************\n *\/\nfunction addStyleText(stack, topMargin, text, lineLimit, font, textColor, width = 0) {\n  textStyle.stack = stack\n  textStyle.topMargin = topMargin\n  textStyle.text = text\n  textStyle.lineLimit = lineLimit\n  textStyle.font = font\n  textStyle.textColor = textColor\n  addText(textStyle)\n  textStyle.lineLimit = 0\n}\n\nfunction addText(style, width = 0) {\n  style.stack.size = new Size(width, 0)\n  style.stack.addSpacer(style.topMargin)\n  let textSpan = style.stack.addText(style.text + \"\")\n  textSpan.font = style.font\n  textSpan.lineLimit = style.lineLimit\n  textSpan.textColor = style.textColor\n}\n\n\n\/*\n **************************************\n * 添加图片显示\n **************************************\n *\/\nfunction addStyleImg(stack, topMargin, img, width, length, tintColor) {\n  imgStyle.stack = stack\n  imgStyle.topMargin = topMargin\n  imgStyle.img = img\n  imgStyle.width = width\n  imgStyle.length = length\n  imgStyle.tintColor = tintColor\n  addImg(imgStyle)\n}\n\nfunction addImg(style) {\n  const stack = style.stack\n  stack.addSpacer(style.topMargin)\n  let imgSpan = stack.addImage(style.img)\n  imgSpan.imageSize = new Size(style.width, style.length)\n  const tintColor = style.tintColor\n  if (tintColor != undefined) {\n    imgSpan.tintColor = tintColor\n  }\n}\n\n\n\/*\n **************************************\n * 格式化时间\n **************************************\n *\/\nfunction getDateStr(date, formatter = \"yyyy年MM月d日\") {\n  let df = new DateFormatter()\n  df.locale = locale\n  df.dateFormat = formatter\n  return df.string(date)\n}\n\n\/*\n **************************************\n * 按照时间获取问候语\n **************************************\n *\/\nfunction provideGreeting(date) {\n  const hour = date.getHours()\n  if (hour    < 5)  { return greetingText.nightGreeting }\n  if (hour    < 11) { return greetingText.morningGreeting }\n  if (hour    > 11 && hour-12 < 1)  { return greetingText.noonGreeting }\n  if (hour-12 < 7)  { return greetingText.afternoonGreeting }\n  if (hour-12 < 10) { return greetingText.eveningGreeting }\n  return greetingText.nightGreeting\n}\n\n\n\/*\n **************************************\n * 获取彩云天气\n **************************************\n *\/\nasync function getWeather() {\n  let weatherInfo = {}\n  const location = await getLocation()\n  log(\"定位信息：\" + location.locality + \"·\" + location.subLocality)\n  \/\/ 彩云天气域名\n  const DOMAIN = `https:\/\/api.caiyunapp.com\/v2.5\/${apiKey}\/${location.longitude},${location.latitude}\/weather.json?alert=true`\n  const weatherJsonData = await getJson(DOMAIN)\n  if (weatherJsonData.status == \"ok\") {\n    log(\"天气数据请求成功\")\n    \/\/ 天气突发预警\n    const alertWeatherTitle = weatherJsonData.result.alert.content.title\n    log(\"突发的天气预警==>\" + alertWeatherTitle)\n    weatherInfo.alertWeatherTitle = alertWeatherTitle\n\n    \/\/ 温度范围\n    const temperatureData = weatherJsonData.result.daily.temperature[0]\n    \/\/ 最低温度\n    const minTemperature = temperatureData.min\n    \/\/ 最高温度\n    const maxTemperature = temperatureData.max\n    log(\"温度==>\" + minTemperature + \"|\" + maxTemperature)\n    weatherInfo.minTemperature = Math.round(minTemperature)\n    weatherInfo.maxTemperature = Math.round(maxTemperature)\n\n    \/\/ 体感温度\n    const bodyFeelingTemperature = weatherJsonData.result.realtime.apparent_temperature \n    log(\"体感温度==>\" + bodyFeelingTemperature)\n    weatherInfo.bodyFeelingTemperature = Math.round(bodyFeelingTemperature)\n\n    \/\/ 天气状况 weatherIcos[weatherIco]\n    const weather = weatherJsonData.result.realtime.skycon\n    log(\"天气状况==>\" + weather + \"|\" + weatherIcos[weather])\n  weatherInfo.weatherIco = weatherIcos[weather]\n\n    \/\/ 天气描述\n    const weatherDesc = weatherJsonData.result.forecast_keypoint\n    log(\"天气描述==>\" + weatherDesc)\n    weatherInfo.weatherDesc = weatherDesc\n\n    \/\/ 相对湿度\n    const humidity = (weatherJsonData.result.realtime.humidity * 100) + \"%\"\n    log(\"相对湿度==>\" + humidity)\n    weatherInfo.humidity = humidity\n\n    \/\/ 舒适指数\n    const comfort = weatherJsonData.result.realtime.life_index.comfort.desc\n    log(\"舒适指数==>\" + comfort)\n    weatherInfo.comfort = comfort\n\n    \/\/ 紫外线指数\n    const ultraviolet = weatherJsonData.result.realtime.life_index.ultraviolet.desc\n    log(\"紫外线指数==>\" + ultraviolet)\n    weatherInfo.ultraviolet = ultraviolet\n\n    \/\/ 空气质量\n    const aqi = weatherJsonData.result.realtime.air_quality.aqi.chn\n    const aqiInfo = airQuality(aqi)\n    log(\"空气质量==>\" + aqiInfo)\n    weatherInfo.aqiInfo = aqiInfo\n\n    \/\/ 日出日落\n    const astro = weatherJsonData.result.daily.astro[0]\n    \/\/ 日出\n    const sunrise = astro.sunrise.time\n    \/\/ 日落\n    const sunset = astro.sunset.time\n    log(\"日出==>\" + sunrise + \"，日落==>\" + sunset)\n    weatherInfo.sunrise = sunrise.toString()\n    weatherInfo.sunset = sunset.toString()\n  }\n\n  return weatherInfo\n}\n\n\n\/*\n **************************************\n * 获取定位\n **************************************\n *\/\nasync function getLocation() {\n  if (!lockLocation) {\n    try {\n      const location = await Location.current()\n      const geocode = await Location.reverseGeocode(location.latitude, location.longitude, locale)\n      locationData.latitude = location.latitude\n      locationData.longitude = location.longitude\n      const geo = geocode[0]\n      \/\/ 市\n      locationData.locality = geo.locality\n      \/\/ 区\n      locationData.subLocality = geo.subLocality\n      \/\/ 街道\n      locationData.street = geo.thoroughfare\n      log(\"定位信息：latitude=\" + location.latitude + \"，longitude=\" + location.longitude + \"，locality=\"\n       + locationData.locality + \"，subLocality=\" + locationData.subLocality + \"，street=\" + locationData.street)\n    } catch(e) {\n      log(\"定位出错了，\" + e.toString())\n    }\n  }\n\n  return locationData\n}\n\n\n\/*\n **************************************\n * 日程筛选\n **************************************\n *\/\nfunction shouldShowSchedule(schedule) {\n  const currentDate = new Date()\n  \/\/ 被取消的日程不用显示\n  if (schedule.title.startsWith(\"Canceled:\")) { return false }\n  \/\/ 与当前时间做比较\n  let timeInterval = schedule.startDate.getTime() > currentDate.getTime()\n  \/\/ 返回全天跟还没过去的\n  return timeInterval || schedule.isAllDay\n}\n\n\n\/*\n **************************************\n * 日程列表\n **************************************\n *\/\nasync function getSchedules() {\n  let showSchedules = []\n  const todaySchedules = await CalendarEvent.today([])\n  for (const schedule of todaySchedules) {\n    if (shouldShowSchedule(schedule)) {\n      \/\/ 日程\n      let scheduleObj = {}\n      \/\/ 开始时间\n      const startDate = schedule.startDate\n        \/\/ 开始小时\n      const startHour = (\"0\" + startDate.getHours()).slice(-2)\n      \/\/ 开始分钟\n      const startMinute = (\"0\" + startDate.getMinutes()).slice(-2)\n      \n      \/\/ 结束时间\n      const endDate = schedule.endDate\n      \/\/ 结束小时\n      const endHour = (\"0\" + endDate.getHours()).slice(-2)\n      \/\/ 结束分钟\n      const endMinute = (\"0\" + endDate.getMinutes()).slice(-2)\n      \n      \/\/ 时间安排展示\n      let timeText = startHour + \":\" + startMinute + \"→\" + endHour + \":\" + endMinute\n      if (schedule.isAllDay) {\n        timeText = \"全天\"\n      }\n\n      \/\/ 构造格式后的日程\n      scheduleObj.title = schedule.title\n      scheduleObj.timeText = timeText \n      log(\">>日程：\" + scheduleObj.title + \"==>\" + timeText)\n      showSchedules.push(scheduleObj)\n    }\n  }\n\n  return showSchedules\n}\n\n\n\/*\n **************************************\n * 提醒事项列表\n **************************************\n *\/\nasync function getReminders() {\n  let showReminders = []\n  const allReminders = await Reminder.all();\n  for (const reminder of allReminders) {\n    if (!reminder.isCompleted) {\n      let reminderObj = {}\n      \/\/ 构造格式后的提醒事项\n      reminderObj.title = reminder.title\n      reminderObj.dueDate = reminder.dueDate\n      log(\">>提醒事项：\" + reminderObj.title + \"==>\" + reminderObj.dueDate)\n      showReminders.push(reminder)\n    }\n  }\n\n  return showReminders\n}\n\n\n\/*\n **************************************\n * 网络请求get封装\n **************************************\n *\/\nasync function getJson(url) {\n  const request = new Request(url)\n  const defaultHeaders = {\n    \"Accept\": \"*\/*\",\n    \"Content-Type\": \"application\/json\"\n  }\n\n  request.url = url\n  request.method = 'GET'\n  request.headers = defaultHeaders\n\n  const data = await request.loadJSON()\n\n  return data\n}\n\n\n\/*\n **************************************\n * 获取icon\n **************************************\n *\/\nfunction getSFIco(batteryKey) {\n  return SFSymbol.named(batteryKey).image\n}\n\n\n\/*\n **************************************\n * 空气质量指标\n **************************************\n *\/\nfunction airQuality(levelNum) {\n  \/\/ 0-50 优，51-100 良，101-150 轻度污染，151-200 中度污染\n  \/\/ 201-300 重度污染，>300 严重污染\n  if (levelNum >= 0 && levelNum <= 50) {\n    return \"优秀\"\n  } else if (levelNum >= 51 && levelNum <= 100) {\n    return \"良好\"\n  } else if (levelNum >= 101 && levelNum <= 150) {\n    return \"轻度\"\n  } else if (levelNum >= 151 && levelNum <= 200) {\n    return \"中度\"\n  } else if (levelNum >= 201 && levelNum <= 300) {\n    return \"重度\"\n  } else {\n    return \"严重\"\n  }\n}\n\n\n\/*\n **************************************\n * 获取电池信息\n **************************************\n *\/\nfunction getBatteryLevel() {\n  const batteryLevel = Device.batteryLevel()\n  const batteryAscii = `${Math.round(batteryLevel * 100)}%`\n  log(\"电池==>\" + batteryAscii)\n  return batteryAscii;\n}\n\n\n\/*\n **************************************\n * 在线获取农历信息\n **************************************\n *\/\nasync function getLunar() {\n  const request = new Request(\"https:\/\/www.iamwawa.cn\/home\/nongli\/ajax\")\n  const defaultHeaders = {\n    \"Accept\": \"*\/*\",\n    \"Content-Type\": \"application\/json\"\n  }\n  request.method = 'POST'\n  request.headers = defaultHeaders\n  request.addParameterToMultipart(\"type\", \"solar\")\n  request.addParameterToMultipart(\"year\", year + \"\")\n  request.addParameterToMultipart(\"month\", month + \"\")\n  request.addParameterToMultipart(\"day\", day + \"\")\n  const data = await request.loadJSON()\n  return data\n}\n\n\/*\n **************************************\n * 在线获取今日诗词\n **************************************\n *\/\nasync function getPoetry() {\n  const request = new Request(\"https:\/\/v2.jinrishici.com\/sentence\")\n  const defaultHeaders = {\n    \"Accept\": \"*\/*\",\n    \"Content-Type\": \"application\/json\"\n  }\n  request.method = 'GET'\n  request.headers = defaultHeaders\n  const data = await request.loadJSON()\n  log(\"诗词==>\" + data.status)\n  return data\n }\n\n\n\/*\n **************************************\n * 获取星期几\n **************************************\n *\/\n function getDayWeekTitle(date) {\n  return weekTitle[date.getDay()]\n }\n\n\n\/*\n **************************************\n * 右对齐\n **************************************\n *\/\nfunction alignRightStack(alignmentStack) {\n  let returnStack = alignmentStack.addStack()\n  returnStack.layoutHorizontally()\n  returnStack.addSpacer()\n  return returnStack\n}\n\n\n\/*\n **************************************\n * 水平居中\n **************************************\n *\/\nfunction horizontallyCenterStack(alignmentStack) {\n  let returnStack = alignmentStack.addStack()\n  returnStack.layoutHorizontally()\n  returnStack.centerAlignContent()\n  return returnStack\n}\n\n\n\/*\n **************************************\n * 垂直居中\n **************************************\n *\/\nfunction verticallyCenterStack(alignmentStack) {\n  let returnStack = alignmentStack.addStack()\n  returnStack.layoutVertically()\n  returnStack.centerAlignContent()\n  return returnStack\n}",
  "share_sheet_inputs" : [

  ]
}